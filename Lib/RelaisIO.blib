' Steuerungsbiblitotek für die 4 Internen Relais (Index 1 - 4) + LEDs und 8
' weitere externe Relais (Index 5 - 14).
' ACHTUNG: Falls "relaisImpulse" verwendet wird, wird der Timer exklusiv benötigt!
' D.h. Der Aufruf setzt den Timer auf 0!
' TODO: Das könnte z.B. durch einen Offset evtl besser gemacht werden!
                                                                                  
' ********** Ports **********
' Der IIC-Bus
Define RelaisIO_SDA As Port[9]
Define RelaisIO_SCL As Port[10]

Define RelaisIO_InternalRelais1Port As Port[29]
Define RelaisIO_InternalRelais2Port As Port[30]

Define RelaisIO_InternalRelais3Port As Port[31]
Define RelaisIO_InternalRelais4Port As Port[32]

Define RelaisIO_ExternalRelais1Port As Port[1]
Define RelaisIO_ExternalRelais2Port As Port[2] ' Port 2 ist Defekt

Define RelaisIO_ExternalRelais3Port As Port[3]
Define RelaisIO_ExternalRelais4Port As Port[4]

Define RelaisIO_ExternalRelais5Port As Port[5]
Define RelaisIO_ExternalRelais6Port As Port[6]

Define RelaisIO_ExternalRelais7Port As Port[7]
Define RelaisIO_ExternalRelais8Port As Port[8]

Define RelaisIO_ExternalRelais9Port As Bit' Port[9]
Define RelaisIO_ExternalRelais10Port As Port[16] 'Trick, um Impuls zu benutzen damit das Licht nur 10sec an ist

Define RelaisIO_LED1Port As Port[25]
Define RelaisIO_LED2Port As Port[26]
Define RelaisIO_LED3Port As Port[27]
Define RelaisIO_LED4Port As Port[28]

' ********** Interne Datenstrukturen **********
Define RelaisIO_InternalRelaisState As Byte 'Zustand der Internen Relais
Define RelaisIO_InternalRelais1State Ref RelaisIO_InternalRelaisState At Bit[1]
Define RelaisIO_InternalRelais2State Ref RelaisIO_InternalRelaisState At Bit[2]
Define RelaisIO_InternalRelais3State Ref RelaisIO_InternalRelaisState At Bit[3]
Define RelaisIO_InternalRelais4State Ref RelaisIO_InternalRelaisState At Bit[4]

Define RelaisIO_ExternalRelaisState As Word 'Zustand der externen Relais
Define RelaisIO_ExternalRelais1State Ref RelaisIO_ExternalRelaisState At Bit[1]
Define RelaisIO_ExternalRelais2State Ref RelaisIO_ExternalRelaisState At Bit[2]
Define RelaisIO_ExternalRelais3State Ref RelaisIO_ExternalRelaisState At Bit[3]
Define RelaisIO_ExternalRelais4State Ref RelaisIO_ExternalRelaisState At Bit[4]
Define RelaisIO_ExternalRelais5State Ref RelaisIO_ExternalRelaisState At Bit[5]
Define RelaisIO_ExternalRelais6State Ref RelaisIO_ExternalRelaisState At Bit[6]
Define RelaisIO_ExternalRelais7State Ref RelaisIO_ExternalRelaisState At Bit[7]
Define RelaisIO_ExternalRelais8State Ref RelaisIO_ExternalRelaisState At Bit[8]
Define RelaisIO_ExternalRelais9State Ref RelaisIO_ExternalRelaisState At Bit[9]
Define RelaisIO_ExternalRelais10State Ref RelaisIO_ExternalRelaisState At Bit[10]

' *** Variablen zur allgemeinen Verwendung
Define RelaisIO_TurnOffTimes As String * 29 '(14 * 2)
Define ^RelaisIO_TimerValue As Word 'Pointer auf die TurnOffTimes

Define RelaisIO_Index1 As Byte

Define RelaisIO_CurTime As Word
Define RelaisIO_OldTimerValue As Word

' ********** Initialierung (So bald es geht, damit alle Relais erst einmal aus sind) **********
RelaisIO_SDA=on 'IIC-Bus Inititalisieren
RelaisIO_SCL=on
RelaisIO_InternalRelaisState = Off
RelaisIO_ExternalRelaisState = Off
__RelaisIO_UpdateRelais()
For RelaisIO_Index1 = 1 To 14 'Timer=0 Aktion durchrechnen
  RelaisIO_TimerValue = ^RelaisIO_TurnOffTimes + ((RelaisIO_Index1 - 1) * 2)
  @RelaisIO_TimerValue = 0    
Next    

' ********** Funktionen **********
Function updateRelaisIO()
  RelaisIO_CurTime = Timer
  For RelaisIO_Index1 = 1 To 14 
    RelaisIO_TimerValue = ^RelaisIO_TurnOffTimes + ((RelaisIO_Index1 - 1) * 2)
    If (@RelaisIO_TimerValue > 0) And (@RelaisIO_TimerValue < RelaisIO_CurTime) Then 'Wichtig: Der Timer darf nicht überlaufen! (Wird beim Setzen zurück gestellt)
      setRelaisState(RelaisIO_Index1, Off)
      @RelaisIO_TimerValue = 0 'Wir sind fertig          
    End If      
  Next    
End Function

Function setRelaisState(Index as Byte, State as Bit)
  Select Case Index
    Case 1
      RelaisIO_InternalRelais1State = State
    Case 2
      RelaisIO_InternalRelais2State = State
    Case 3
      RelaisIO_InternalRelais3State = State
    Case 4
      RelaisIO_InternalRelais4State = State
    Case 5
      RelaisIO_ExternalRelais1State = State    
    Case 6
      RelaisIO_ExternalRelais2State = State
    Case 7
      RelaisIO_ExternalRelais3State = State
    Case 8
      RelaisIO_ExternalRelais4State = State      
    Case 9
      RelaisIO_ExternalRelais5State = State
    Case 10
      RelaisIO_ExternalRelais6State = State
    Case 11
      RelaisIO_ExternalRelais7State = State
    Case 12
      RelaisIO_ExternalRelais8State = State
    Case 13
      RelaisIO_ExternalRelais9State = State
    Case 14
      RelaisIO_ExternalRelais10State = State
  End Select
  If (State) Then 'Das dazugehörige Relais ausschalten! 1 <-> 2, 3 <-> 4, ...     
    setRelaisState(Index + ((Index mod 2) * 2) - 1, Off) 'Nach Rücksprung ist nichts mehr zu tun!
  Else 'update wird in der Rekursion aufgerufen
    __RelaisIO_UpdateRelais()
  End If        
End Function

Function getRelaisState(Index as Byte)
  Select Case Index
    Case 1
      Return RelaisIO_InternalRelais1State
    Case 2
      Return RelaisIO_InternalRelais2State
    Case 3
      Return RelaisIO_InternalRelais3State
    Case 4
      Return RelaisIO_InternalRelais4State
    Case 5
      Return RelaisIO_ExternalRelais1State
    Case 6
      Return RelaisIO_ExternalRelais2State
    Case 7
      Return RelaisIO_ExternalRelais3State
    Case 8
      Return RelaisIO_ExternalRelais4State
    Case 9
      Return RelaisIO_ExternalRelais5State
    Case 10
      Return RelaisIO_ExternalRelais6State
    Case 11
      Return RelaisIO_ExternalRelais7State
    Case 12
      Return RelaisIO_ExternalRelais8State
    Case 13
      Return RelaisIO_ExternalRelais9State
    Case 14
      Return RelaisIO_ExternalRelais10State
  End Select
  Return Off  
End Function

' Schaltet ein Relais für Length Sekunden.
' Wichtig: updateRelaisIO muss zum ausschalten regelmäßig aufgerufen werden! 
Function relaisImpulse(Index As Byte, Length As Byte)
  If (Index > 14) Or (Index < 1) Then Return False
   
  RelaisIO_OldTimerValue = Timer
  Timer = 0 'TODO: Das muss schöner!
    
  setRelaisState(Index, On)
  
  For RelaisIO_Index1 = 1 To 14 'Timer=0 Aktion durchrechnen 
    RelaisIO_TimerValue = ^RelaisIO_TurnOffTimes + ((RelaisIO_Index1 - 1) * 2)
    If (@RelaisIO_TimerValue > 0) Then
      @RelaisIO_TimerValue = Max(1, @RelaisIO_TimerValue - RelaisIO_OldTimerValue) 
    End If
  Next
  RelaisIO_TimerValue = ^RelaisIO_TurnOffTimes + ((Index - 1) * 2)
  @RelaisIO_TimerValue = Length * 50  
End Function

' ********** Interne Funktionen **********
Function __RelaisIO_UpdateRelais() 'Privat!
  RelaisIO_InternalRelais1Port = RelaisIO_InternalRelais1State
  RelaisIO_InternalRelais2Port = RelaisIO_InternalRelais2State
  RelaisIO_InternalRelais3Port = RelaisIO_InternalRelais3State
  RelaisIO_InternalRelais4Port = RelaisIO_InternalRelais4State
  RelaisIO_ExternalRelais1Port = RelaisIO_ExternalRelais1State
  RelaisIO_LED1Port = RelaisIO_ExternalRelais1State
  RelaisIO_ExternalRelais2Port = RelaisIO_ExternalRelais2State
  RelaisIO_LED2Port = RelaisIO_ExternalRelais2State
  RelaisIO_ExternalRelais3Port = RelaisIO_ExternalRelais3State
  RelaisIO_LED3Port = RelaisIO_ExternalRelais3State
  RelaisIO_ExternalRelais4Port = RelaisIO_ExternalRelais4State
  RelaisIO_LED4Port = RelaisIO_ExternalRelais4State
  RelaisIO_ExternalRelais5Port = RelaisIO_ExternalRelais5State
  RelaisIO_ExternalRelais6Port = RelaisIO_ExternalRelais6State
  RelaisIO_ExternalRelais7Port = RelaisIO_ExternalRelais7State
  RelaisIO_ExternalRelais8Port = RelaisIO_ExternalRelais8State
  RelaisIO_ExternalRelais9Port = RelaisIO_ExternalRelais9State
  RelaisIO_ExternalRelais10Port = not RelaisIO_ExternalRelais10State 'Licht ist invertiert!
End Function
